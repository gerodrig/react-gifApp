{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uLAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAqCC,mBAAS,IAA9C,mBAAOC,EAAP,KAAmBC,EAAnB,KAwBA,OACI,sBAAMC,SAjBW,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAG3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAExCN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SA1Bc,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,a,+BCTfG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAIbC,EAJa,iDAIoCC,UAAUH,GAJ9C,+DAKAI,MAAOF,GALP,cAKbG,EALa,gBAOEA,EAAKC,OAPP,uBAOZC,EAPY,EAOZA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdvB,kBAmBZM,GAnBY,4CAAH,sDCCXO,EAAc,SAAC,GAAwB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGtC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCHJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAItB,ECLwB,SAAEA,GAEtB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBJ,OAjBIC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHC,YAAY,WAGRJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAGjB,CAAEpB,IAEGqB,EDpB0BM,CAAc3B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAKrB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aESvBiB,EA5BC,WAEb,MAAoC1C,mBAAS,CAAC,gBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAOC,OACI,qCACI,wCACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADNA,Y,MClBlC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3e4c35bc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue ] = useState(''); //the use state should be declared as an empty string\n\n    //catch the value that we need to change\n    const handleInputChange = (e) => {\n        //console.log(e.target.value)\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        //this is to prevent the default refresh when submitting forms\n        e.preventDefault();\n        \n        if( inputValue.trim().length > 2 ) {\n\n            //only add if input is at least 2 letters\n            setCategories( cats => [ inputValue, ...cats ]);\n            //set the input value to an empty box\n            setInputValue('');\n        }\n\n        \n        \n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }/>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n    export const getGifs = async ( category ) => {\n\n\n        //A new string representing the provided string encoded as a URI.\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=HIpicCD1rp5ipDq7b04p5IAeJ5G55GNn`;\n        const resp = await fetch( url );\n        //we destructure the url to receive only the data\n        const {data} = await resp.json();\n\n        //we only fetch the information that we are interested in from the fetch and assign it to gifs constant.\n        const gifs = data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        })\n\n        //console.log(gifs);\n        return gifs ;\n    }","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url }) => {\n\n    //console.log({ id, title, url } );\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n//import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    // const [images, setImages] = useState([]);\n    //when destructuring an object we can rename the value with : like data:images renamed to images\n    const { data:images, loading } = useFetchGifs( category );\n\n    //console.log(loading);\n\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={ img.id }\n                            { ...img }/> //very common to use to send the destrucured object\n                    ))\n                }\n                </div>\n        </>\n    )\n}\n","//custom hooks\nimport { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n   \n        const [state, setState] = useState({\n            data: [],\n            loading: true,\n        });\n\n        //use Effect to avoid an infinit loop with the useState and avoid to fetch every time the button is pressed\n        useEffect( () => {\n            \n            getGifs( category )\n                .then( imgs => {\n\n                    setTimeout( () => {\n\n                        //console.log(imgs);\n                        setState({\n                            data: imgs,\n                            loading: false\n                        });\n                    }, 1000);\n                \n                })// the [] empty array is to add the dependencies that in this case would be zero\n    },[ category ]) \n\n    return state;\n}\n","//you can use rafc shortcut\nimport React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifApp =  () => {\n\n   const [categories, setCategories] = useState(['Chinchillas']);\n\n    // const handleAdd = () => {\n    //     //setCategories( [...categories, 'Squirrel'] );\n    //     setCategories( cats => [...cats, 'Squirrel' ]);\n    // }\n\n    return (\n        <>\n            <h2>GifApp</h2>\n            <AddCategory setCategories= { setCategories }/>\n            <hr/>\n\n            <ol>\n                {\n                    categories.map( category => \n                        <GifGrid \n                            key={ category }\n                            category= { category }/>\n                        )\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifApp from './GifApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}